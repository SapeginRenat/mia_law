/**
 * This class is generated by jOOQ
 */
package ge.economy.law.model.tables;


import ge.economy.law.model.Keys;
import ge.economy.law.model.Public;
import ge.economy.law.model.tables.records.CaseDocRecord;
import org.jooq.*;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.7.3"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class CaseDoc extends TableImpl<CaseDocRecord> {

    private static final long serialVersionUID = -42823409;

    /**
     * The reference instance of <code>public.case_doc</code>
     */
    public static final CaseDoc CASE_DOC = new CaseDoc();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CaseDocRecord> getRecordType() {
        return CaseDocRecord.class;
    }

    /**
     * The column <code>public.case_doc.doc_id</code>.
     */
    public final TableField<CaseDocRecord, Integer> DOC_ID = createField("doc_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaulted(true), this, "");

    /**
     * The column <code>public.case_doc.case_id</code>.
     */
    public final TableField<CaseDocRecord, Integer> CASE_ID = createField("case_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.case_doc.name</code>.
     */
    public final TableField<CaseDocRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * Create a <code>public.case_doc</code> table reference
     */
    public CaseDoc() {
        this("case_doc", null);
    }

    /**
     * Create an aliased <code>public.case_doc</code> table reference
     */
    public CaseDoc(String alias) {
        this(alias, CASE_DOC);
    }

    private CaseDoc(String alias, Table<CaseDocRecord> aliased) {
        this(alias, aliased, null);
    }

    private CaseDoc(String alias, Table<CaseDocRecord> aliased, Field<?>[] parameters) {
        super(alias, Public.PUBLIC, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<CaseDocRecord, Integer> getIdentity() {
        return Keys.IDENTITY_CASE_DOC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CaseDocRecord> getPrimaryKey() {
        return Keys.CASE_DOC_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CaseDocRecord>> getKeys() {
        return Arrays.<UniqueKey<CaseDocRecord>>asList(Keys.CASE_DOC_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CaseDoc as(String alias) {
        return new CaseDoc(alias, this);
    }

    /**
     * Rename this table
     */
    public CaseDoc rename(String name) {
        return new CaseDoc(name, null);
    }
}
